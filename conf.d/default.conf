lua_package_path "/workspace/lib/?.lua;;";

init_worker_by_lua_block {
    local resty_roundrobin = require "resty.roundrobin"
    local rr_orai_up = resty_roundrobin:new("/etc/nginx/conf.d/chains/orai.json")
    local rr_osmosis_up = resty_roundrobin:new("/etc/nginx/conf.d/chains/osmosis.json")
    local rr_noble_up = resty_roundrobin:new("/etc/nginx/conf.d/chains/noble.json")

    package.loaded.delay = 5  -- in seconds as block time    
    package.loaded.rr_orai_up = rr_orai_up
    package.loaded.rr_osmosis_up = rr_osmosis_up
    package.loaded.rr_noble_up = rr_noble_up

    local function check(premature)
        if not premature then
            -- do the health check or other routine work
            local ok, err = ngx.timer.at(package.loaded.delay, check)
            if not ok then
                ngx.log(ngx.ERR, "failed to create timer: ", err)
                return
            end
        end
        rr_orai_up:update(23357)
        rr_osmosis_up:update(12557)
        rr_noble_up:update(21557)
    end

    local hdl, err = ngx.timer.at(0, check)
    if not hdl then
        ngx.log(ngx.ERR, "failed to create timer: ", err)
        return
    end
}

server {
    listen 80;
    server_name localhost;
    set $template_root /var/www/templates;

    auth_basic "Restricted Area";
    auth_basic_user_file /etc/nginx/conf.d/chains/.htpasswd;

    location /orai_weight/ {
        root html;
        default_type 'text/html';
        content_by_lua_block {
            local template = require "resty.template"
            local rpc_rr = package.loaded.rr_orai_up
            
            template.render("view.html", {
                heights = rpc_rr.heights,
                nodes = rpc_rr.nodes,
                max_height = rpc_rr:get_max_height(),
                interval = package.loaded.delay,
                link = "https://scan.orai.io"
            })
        }
    }

    location /osmosis_weight/ {
        root html;
        default_type 'text/html';
        content_by_lua_block {
            local template = require "resty.template"
            local rpc_rr = package.loaded.rr_osmosis_up
            
            template.render("view.html", {
                heights = rpc_rr.heights,
                nodes = rpc_rr.nodes,
                max_height = rpc_rr:get_max_height(),
                interval = package.loaded.delay,
                link = "https://scan.orai.io"
            })
        }
    }

    location /noble_weight/ {
        root html;
        default_type 'text/html';
        content_by_lua_block {
            local template = require "resty.template"
            local rpc_rr = package.loaded.rr_noble_up
            
            template.render("view.html", {
                heights = rpc_rr.heights,
                nodes = rpc_rr.nodes,
                max_height = rpc_rr:get_max_height(),
                interval = package.loaded.delay,
                link = "https://scan.orai.io"
            })
        }
    }

    # location /_access_report/ {
    #     access_log off;
    #     alias /var/www/templates/;
    #     gzip_static on;
    #     expires max;
    #     add_header Cache-Control public;
    # }

    # location /_arws/ {
    #     proxy_pass http://localhost:7890;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header Host $http_host;
    # }
}
