# error_log  /var/log/nginx/error.log;

lua_package_path "/workspace/lib/?.lua;;";

init_worker_by_lua_block {    
    local resty_roundrobin = require "resty.roundrobin"    
    local rr_up = resty_roundrobin:new({
        ["3.14.142.99:36657"] = 100,
        ["18.191.171.150:36657"] = 100,
    })        
    package.loaded.delay = 5  -- in seconds as block time    
    package.loaded.rr_up = rr_up

    local function check(premature)
         if not premature then
             -- do the health check or other routine work
             local ok, err = ngx.timer.at(package.loaded.delay, check)
             if not ok then
                 ngx.log(ngx.ERR, "failed to create timer: ", err)
                 return
             end
         end        
        rr_up:update()
    end

    local hdl, err = ngx.timer.at(0, check)
    if not hdl then
         ngx.log(ngx.ERR, "failed to create timer: ", err)
         return
    end                
    
}

upstream rpc_rr {
    server 0.0.0.1;
    balancer_by_lua_block {
        assert(require("ngx.balancer").set_current_peer(package.loaded.rr_up:next(), 36657))
    }
}

server {    
    set $template_root /var/www/templates;    
    location /_weight/ {
        root html;
        default_type 'text/html';
        content_by_lua_block {
            local template = require "resty.template"
            local rr_up = package.loaded.rr_up
            template.render("view.html", {          
                heights = rr_up.heights,
                nodes = rr_up.nodes,   
                max_height = rr_up:get_max_height(),
                interval = package.loaded.delay,
                link = "https://scan.orai.io", 
            })
        }
    }
}

server {
    server_name osmosis-rpc.orai.io;
    location / {
        proxy_pass http://rpc_rr;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
}