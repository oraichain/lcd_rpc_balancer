# error_log  /var/log/nginx/error.log;

lua_package_path "/workspace/lib/?.lua;;";

init_worker_by_lua_block {    
    local resty_roundrobin = require "resty.roundrobin"    

    local atom_up = resty_roundrobin:new({["172.0.0.1"]=100})

    local osmo_up = resty_roundrobin:new({["172.0.0.1"]=100})

    local inj_up = resty_roundrobin:new({["172.0.0.1"]=100})

    local tia_up = resty_roundrobin:new({["172.0.0.1"]=100})
    
    local dym_up = resty_roundrobin:new({["172.0.0.1"]=100})
    
    local noble_up = resty_roundrobin:new({["172.0.0.1"]=100})

    package.loaded.delay = 10  -- in seconds as block time    
    package.loaded.atom_up = atom_up
    package.loaded.osmo_up = osmo_up
    package.loaded.inj_up = inj_up
    package.loaded.tia_up = tia_up
    package.loaded.dym_up = dym_up
    package.loaded.noble_up = noble_up

    local function check(premature)
         if not premature then
             -- do the health check or other routine work
             local ok, err = ngx.timer.at(package.loaded.delay, check)
             if not ok then
                 ngx.log(ngx.ERR, "failed to create timer: ", err)
                 return
             end
         end        
        atom_up:update()
        osmo_up:update()
        inj_up:update()
        tia_up:update()
        dym_up:update()
        noble_up:update()
    end

    local hdl, err = ngx.timer.at(0, check)
    if not hdl then
         ngx.log(ngx.ERR, "failed to create timer: ", err)
         return
    end                
    
}

upstream rpc_atom {
    server 0.0.0.1;
    balancer_by_lua_block {
        assert(require("ngx.balancer").set_current_peer(package.loaded.atom_up:next(), 26657))
    }
}

upstream rpc_osmo {
    server 0.0.0.1;
    balancer_by_lua_block {
        assert(require("ngx.balancer").set_current_peer(package.loaded.osmo_up:next(), 26657))
    }
}

upstream rpc_inj {
    server 0.0.0.1;
    balancer_by_lua_block {
        assert(require("ngx.balancer").set_current_peer(package.loaded.inj_up:next(), 26657))
    }
}

upstream rpc_tia {
    server 0.0.0.1;
    balancer_by_lua_block {
        assert(require("ngx.balancer").set_current_peer(package.loaded.tia_up:next(), 26657))
    }
}

upstream rpc_dym {
    server 0.0.0.1;
    balancer_by_lua_block {
        assert(require("ngx.balancer").set_current_peer(package.loaded.dym_up:next(), 26657))
    }
}

upstream rpc_noble {
    server 0.0.0.1;
    balancer_by_lua_block {
        assert(require("ngx.balancer").set_current_peer(package.loaded.noble_up:next(), 26657))
    }
}

server {    
    set $template_root /var/www/templates;
    location /_access_report/ {
        access_log off;
        alias /var/www/templates/;
        gzip_static on;
        expires max;
        add_header Cache-Control public;
    }

    location /_arws/ {
        access_log off;
        proxy_pass http://localhost:7890;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
    }

    location = /favicon.ico {
        access_log off;
        return 301 https://scan.orai.io/favicon.ico;
    }

    location /_watom/ {
        access_log off;
        root html;
        default_type 'text/html';
        content_by_lua_block {
            local template = require "resty.template"
            local atom_up = package.loaded.atom_up
            template.render("view.html", {          
                heights = atom_up.heights,
                nodes = atom_up.nodes,   
                max_height = atom_up:get_max_height(),
                interval = package.loaded.delay,
                network = "cosmoshub-4",
                link = "https://mintscan.io", 
            })
        }
    }

    location /_wosmo/ {
        access_log off;
        root html;
        default_type 'text/html';
        content_by_lua_block {
            local template = require "resty.template"
            local osmo_up = package.loaded.osmo_up
            template.render("view.html", {          
                heights = osmo_up.heights,
                nodes = osmo_up.nodes,   
                max_height = osmo_up:get_max_height(),
                interval = package.loaded.delay,
                network = "osmosis-1",
                link = "https://mintscan.io", 
            })
        }
    }
    
    location /_winj/ {
        access_log off;
        root html;
        default_type 'text/html';
        content_by_lua_block {
            local template = require "resty.template"
            local inj_up = package.loaded.inj_up
            template.render("view.html", {          
                heights = inj_up.heights,
                nodes = inj_up.nodes,   
                max_height = inj_up:get_max_height(),
                interval = package.loaded.delay,
                network = "injective-1",
                link = "https://mintscan.io", 
            })
        }
    }
    
    location /_wtia/ {
        access_log off;
        root html;
        default_type 'text/html';
        content_by_lua_block {
            local template = require "resty.template"
            local tia_up = package.loaded.tia_up
            template.render("view.html", {          
                heights = tia_up.heights,
                nodes = tia_up.nodes,   
                max_height = tia_up:get_max_height(),
                interval = package.loaded.delay,
                network = "celestia",
                link = "https://mintscan.io", 
            })
        }
    }
    
    location /_wdym/ {
        access_log off;
        root html;
        default_type 'text/html';
        content_by_lua_block {
            local template = require "resty.template"
            local dym_up = package.loaded.dym_up
            template.render("view.html", {          
                heights = dym_up.heights,
                nodes = dym_up.nodes,   
                max_height = dym_up:get_max_height(),
                interval = package.loaded.delay,
                network = "dymension_1100-1",
                link = "https://mintscan.io", 
            })
        }
    }
    
    location /_wnoble/ {
        access_log off;
        root html;
        default_type 'text/html';
        content_by_lua_block {
            local template = require "resty.template"
            local noble_up = package.loaded.noble_up
            template.render("view.html", {          
                heights = noble_up.heights,
                nodes = noble_up.nodes,   
                max_height = noble_up:get_max_height(),
                interval = package.loaded.delay,
                network = "noble-1",
                link = "https://mintscan.io", 
            })
        }
    }
}

server {
    server_name cosmos-rpc-global.orai.io;
    location / {
        proxy_pass http://rpc_atom;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
}

server {
    server_name osmosis-rpc-global.orai.io;
    location / {
        proxy_pass http://rpc_osmo;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
}

server {
    server_name injective-rpc-global.orai.io;
    location / {
        proxy_pass http://rpc_inj;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
}

server {
    server_name celestia-rpc-global.orai.io;
    location / {
        proxy_pass http://rpc_tia;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
}

server {
    server_name dymension-rpc-global.orai.io;
    location / {
        proxy_pass http://rpc_dym;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
}

server {
    server_name noble-rpc-global.orai.io;
    location / {
        proxy_pass http://rpc_noble;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
}
